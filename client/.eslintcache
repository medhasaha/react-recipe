[{"D:\\My Projects\\react-recipe\\client\\src\\index.js":"1","D:\\My Projects\\react-recipe\\client\\src\\Components\\App.js":"2","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeSearch.js":"3","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeDetails.js":"4","D:\\My Projects\\react-recipe\\client\\src\\ServiceClass.js":"5","D:\\My Projects\\react-recipe\\client\\src\\Components\\NavBar.js":"6","D:\\My Projects\\react-recipe\\client\\src\\Config.js":"7","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeCard.js":"8","D:\\My Projects\\react-recipe\\client\\src\\Components\\NutritionChart.js":"9","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipesHome.js":"10","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeHeader.js":"11","D:\\My Projects\\react-recipe\\client\\src\\Components\\LogIn.js":"12","D:\\My Projects\\react-recipe\\client\\src\\Components\\SignUp.js":"13","D:\\My Projects\\react-recipe\\client\\src\\Components\\Dashboard.js":"14","D:\\My Projects\\react-recipe\\client\\src\\Components\\theme.js":"15","D:\\My Projects\\react-recipe\\client\\src\\Components\\DrawerJSX.js":"16"},{"size":662,"mtime":1611934918914,"results":"17","hashOfConfig":"18"},{"size":1297,"mtime":1612609207961,"results":"19","hashOfConfig":"18"},{"size":9090,"mtime":1613068074556,"results":"20","hashOfConfig":"18"},{"size":13034,"mtime":1613031418902,"results":"21","hashOfConfig":"18"},{"size":9955,"mtime":1613046136828,"results":"22","hashOfConfig":"18"},{"size":3850,"mtime":1613045969038,"results":"23","hashOfConfig":"18"},{"size":1825,"mtime":1613042610101,"results":"24","hashOfConfig":"18"},{"size":3596,"mtime":1613068074458,"results":"25","hashOfConfig":"18"},{"size":2276,"mtime":1612717342292,"results":"26","hashOfConfig":"18"},{"size":24629,"mtime":1613045302020,"results":"27","hashOfConfig":"18"},{"size":3292,"mtime":1612621953123,"results":"28","hashOfConfig":"18"},{"size":4956,"mtime":1613067522089,"results":"29","hashOfConfig":"18"},{"size":7645,"mtime":1612111163056,"results":"30","hashOfConfig":"18"},{"size":4420,"mtime":1613063822039,"results":"31","hashOfConfig":"18"},{"size":377,"mtime":1611859029298,"results":"32","hashOfConfig":"18"},{"size":9237,"mtime":1612621987504,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1vme7p3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},"D:\\My Projects\\react-recipe\\client\\src\\index.js",[],["75","76"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\App.js",["77"],"import React from 'react';\r\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\r\nimport RecipesHome from './RecipesHome.js'\r\nimport RecipeSearch from './RecipeSearch.js'\r\nimport RecipeDetails from './RecipeDetails.js'\r\nimport LogIn from './LogIn.js'\r\nimport SignUp from './SignUp.js'\r\nimport Dashboard from './Dashboard.js'\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <div>\r\n          {/*<Route exact path=\"/\">\r\n            <Redirect to=\"/recipe/home\" />\r\n          </Route>*/}\r\n          <Route path=\"/recipe/home\" render={(props) => <RecipesHome {...props} baseURL={\"/recipe\"} />} />\r\n          <Route path=\"/recipe/search-results\" render={(props) => <RecipeSearch {...props} baseURL={\"/recipe\"} />} />\r\n          <Route path=\"/recipe/details/:id\" render={(props) => <RecipeDetails {...props} baseURL={\"/recipe\"} />} />\r\n          <Route path=\"/recipe/login\" render={(props) => <LogIn {...props} baseURL={\"/recipe\"} />} />\r\n          <Route path=\"/recipe/signup\" render={(props) => <SignUp {...props} baseURL={\"/recipe\"} />} />\r\n          <Route path=\"/recipe/dashboard\" render={(props) => <Dashboard {...props} baseURL={\"/recipe\"} />} />\r\n        </div>\r\n      </BrowserRouter>    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeSearch.js",["78","79"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeDetails.js",["80","81","82","83","84","85","86","87","88"],"import React, {Component} from 'react';\r\nimport {recipeDetailsAPI, similarRecipesAPI, recipeEquipmentsAPI} from '../ServiceClass.js';\r\nimport CONFIG from '../Config.js'\r\nimport RecipeCard from './RecipeCard.js'\r\nimport NutiritionChart from './NutritionChart.js'\r\nimport RecipeHeader from './RecipeHeader.js'\r\nimport NavBar from './NavBar.js';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CheckBox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport placeholderIcon from '../Assets/Icons/placeholder.svg'\r\nimport vegIcon from '../Assets/Icons/veg.svg'\r\nimport nonVegIcon from '../Assets/Icons/nonVeg.svg'\r\nimport veganIcon from '../Assets/Icons/vegan.svg'\r\n\r\nconst style = theme => ({\r\n\troot : {\r\n    // border: \"5px solid lightgray\",\r\n    margin: \"50px 100px 0px 100px\",\r\n    width: \"auto\",\r\n    padding: \"20px\",\r\n\t},\r\n\trecipeImage : {\r\n\t\twidth : \"100%\",\r\n\t\theight : \"400px\",\r\n\t\tobjectFit : \"cover\",\r\n\t\tobjectPosition : \"center center\",\r\n\t\t// borderRadius : \"50%\"\r\n\t},\r\n\tgridCenterFlex : {\r\n\t\talignItems : \"center\",\r\n\t\tjustifyContent : \"center\",\r\n\t\tdisplay : \"flex\"\r\n\t},\r\n\tgridAboutRecipe : {\r\n\t\talignItems : \"center\",\r\n\t\tjustifyContent : \"center\",\r\n\t\tdisplay : \"flex\",\r\n\t\t// backgroundColor : \"lightgray\",\r\n\t\tpadding : \"20px\"\r\n\t},\r\n\tgridCenter : {\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n\tlogo : {\r\n\t\theight : \"40px\",\r\n\t\twidth : \"40px\"\r\n\t},\r\n\tlogoBig : {\r\n\t\theight : \"72px\",\r\n\t\twidth : \"72px\"\r\n\t},\r\n\tinfoLabel : {\r\n\t\tfontSize : \"1rem\",\r\n\t},\r\n\tinfoLabelBold : {\r\n\t\tfontSize : \"1rem\",\r\n\t\tfontWeight : \"bold\"\r\n\t},\r\n\theading : {\r\n\t\tfontSize : \"2rem\",\r\n\t},\r\n\tvegIcon : {\r\n\t\theight : \"40px\",\r\n\t\twidth : \"40px\"\r\n\t},\r\n\tchip : {\r\n\t\tborder : \"1px solid #932432\",\r\n\t\tmarginLeft : \"4px\"\r\n\t},\r\n\tgridIngredients : {\r\n\t\t// alignItems : \"center\",\r\n\t\t// display : \"flex\"\r\n\t},\r\n\tingredientImage : {\r\n\t\theight : \"70px\",\r\n\t\twidth : \"70px\",\r\n\t\t// objectFit : \"cover\",\r\n\t\t// objectPosition : \"center center\",\r\n\t},\r\n\tingredientLabel : {\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n\tol_style : {\r\n\t\tmargin : \"0px\",\r\n\t\tfontSize : \"1.5rem\",\r\n\t\tlineHeight : \"1.5\",\r\n\t\t// marginLeft : \"10px\"\r\n\t},\r\n\tinstructionLabel : {\r\n\t\tfontSize : \"1.25rem\",\r\n\t\tmargin : \"0px 10px 10px 10px\"\r\n\t},\r\n\tgridCenter : {\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n})\r\n\r\nclass RecipeDetails extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t// console.log(\"RecipeDetails: \",props)\r\n\r\n\t\tthis.state = {\r\n\t\t\tdetails : null,\r\n\t\t\tsimilarRecipes : [],\r\n\t\t\tequipments : [],\r\n\t\t\tisLoaded : false,\r\n\t\t\ttabValue : 0\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tif (this.props && this.props.location && this.props.location.state && this.props.location.state.data) {\r\n      this.setState({\r\n\t\t\t\t...this.props.location.state.data ,\r\n        isLoaded: true\r\n      });\r\n    } else{\tthis.getRecipeDetails(this.props.match.params.id)}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tif ( prevProps.match.params.id && this.props.match.params.id && prevProps.match.params.id !== this.props.match.params.id){\r\n      if (this.props.location.state && this.props.location.state.data) {\r\n        this.setState({ \r\n\t\t\t\t\t...this.props.location.state.data,\r\n\t\t\t\t\tisLoading : true\r\n\t\t\t\t});\r\n      } else {\r\n        this.getRecipeDetails(this.props.match.params.id);\r\n      }\r\n    }\r\n\t}\r\n\r\n\tgetRecipeDetails = (id) => {\r\n\t\tPromise.all([recipeDetailsAPI(id), similarRecipesAPI(id), recipeEquipmentsAPI(id)])\r\n\t\t.then(res => {\r\n\t\t\tconsole.log(res)\r\n\t\t\tthis.setState({\r\n\t\t\t\tdetails : res[0],\r\n\t\t\t\tsimilarRecipes : res[1].slice(0,5),\r\n\t\t\t\tequipments : res[2].equipment,\r\n\t\t\t\tisLoaded : true\r\n\t\t\t}\r\n\t\t\t, () => {\r\n\t\t\t\tthis.props.history.replace(this.props.history.location.pathname,\r\n\t\t\t\t\t{ data: \r\n\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t  details: this.state.details,\r\n\t\t\t\t\t\t\tsimilarRecipes : this.state.similarRecipes,\r\n\t\t\t        equipments : this.state.equipments,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tredirectToRecipeDetails = (id) => {\r\n\t\tthis.props.history.push({\r\n\t\t\tpathname: `${this.props.baseURL}/details/${id}`,\r\n\t\t});\r\n\t}\r\n\r\n\taboutRecipePanelJSX = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<Grid container>\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter} style = {{marginBottom : \"30px\"}}>\r\n\t\t\t\t\t<Typography variant = \"h4\">{this.state.details.title}</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter}>\r\n\t\t\t\t      {/*style = {{\"border-right\" : \"0.1px grey solid\"}}*/}\r\n\t\t\t\t\t{/*<Tooltip title = {\"Cook Time\"}><img src = {timeIcon} className = {classes.logo}/></Tooltip>*/}\r\n\t\t\t\t\t<Typography variant = \"button\" className = {classes.infoLabelBold}>Cook Time</Typography>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.infoLabel}>\r\n\t\t\t\t\t\t{this.state.details.readyInMinutes}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter}>\r\n\t\t\t\t\t<Typography variant = \"button\" className = {classes.infoLabelBold}>Servings</Typography>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.infoLabel}>\r\n\t\t\t\t\t\t{this.state.details.servings}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter}>\r\n\t\t\t\t\t<Tooltip title = {this.state.details.vegetarian ? \"Vegetarian\" : \"Non-vegetarian\"}>\r\n\t\t\t\t\t\t<img src = {this.state.details.vegetarian ? vegIcon : nonVegIcon} \r\n\t\t\t\t\t\t     className = {classes.vegIcon}/>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenterFlex} style = {{marginTop : \"30px\"}}>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" style = {{display : \"inline\"}}>\r\n\t\t\t\t\t\t{\"AUTHOR : \"} {this.state.details.creditsText}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenterFlex} style = {{marginTop : \"10px\"}}>\r\n\t\t\t\t\t{this.state.details.dishTypes.length > 0 && this.state.details.dishTypes.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" className = {classes.chip}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.state.details.cuisines.length > 0 && this.state.details.cuisines.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" className = {classes.chip}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.state.details.diets.length > 0 && this.state.details.diets.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" className = {classes.chip}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.state.details.occasions.length > 0 && this.state.details.occasions.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" className = {classes.chip}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t</Grid>\r\n\t\t)\r\n\t}\r\n\r\n\tingredientJSX = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t  <Grid container>\r\n\t\t    {this.state.details.extendedIngredients.length > 0 && this.state.details.extendedIngredients.map(item => (\r\n\t\t\t\t\t<Grid item xs = {4}>\r\n\t\t\t\t\t\t<Grid container style = {{marginBottom : \"30px\"}}>\r\n\r\n\t\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t\t\t<img src = {item.image \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? CONFIG.IMAGE_URL_INGREDIENT + \"_100x100/\" + item.image \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: placeholderIcon} \r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.ingredientImage}/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.ingredientLabel}>\r\n\t\t\t\t\t\t\t\t\t{/*<CheckBox/>*/}\r\n\t\t\t\t\t\t\t\t\t{item.measures.us.amount}{\" \"}{item.measures.us.unitShort}{\" \"}\r\n\t\t\t\t\t\t\t\t\t{item.measures.metric.amount !== item.measures.us.amount \r\n\t\t\t\t\t\t\t\t\t\t? \"(\" + item.measures.metric.amount + \" \" + item.measures.metric.unitShort + \") \"\r\n\t\t\t\t\t\t\t\t\t\t: \"\"}\r\n\t\t\t\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t    ))}\r\n\t\t  </Grid>\r\n\t\t)\r\n\t}\r\n\r\n\tequipmentsJSX = (item) => {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<Grid container>\r\n\t\t\t\t{this.state.equipments.length > 0 && this.state.equipments.map(item => (\r\n\t\t\t\t\t<Grid item xs = {4}>\r\n\t\t\t\t\t\t<Grid container style = {{marginBottom : \"30px\"}}>\r\n\r\n\t\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t\t\t<img src = {item.image \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? CONFIG.IMAGE_URL_EQUIPMENT + \"_100x100/\" + item.image \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: placeholderIcon } \r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.ingredientImage}/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.ingredientLabel}>\r\n\t\t\t\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t))}\r\n\t\t\t</Grid>\r\n\t\t)\r\n\t}\r\n\r\n\tinstructionsJSX = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\t\r\n\t\t\t<ol className = {classes.ol_style}>\r\n\t\t\t  {this.state.details.analyzedInstructions && this.state.details.analyzedInstructions[0] && this.state.details.analyzedInstructions[0].steps.length > 0 &&\r\n\t\t\t\t\tthis.state.details.analyzedInstructions[0].steps.map((item,index) => (\r\n\t\t\t\t\t<Grid item xs = {12} style = {{display : \"flex\"}}>\r\n\t\t\t\t\t\t<li/>\r\n\t\t\t\t\t\t<Typography variant = \"subtitle1\" style = {{display : \"inline\"}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName = {classes.instructionLabel}>\r\n\t\t\t\t\t\t\t{item.step}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t))}\r\n\t\t\t</ol>\r\n\t\t)\r\n\t}\r\n\r\n\tchangeTabValue = (event, newValue) => {\r\n\t\tthis.setState({\r\n\t\t\ttabValue : newValue\r\n\t\t})\r\n\t}\r\n\r\n\ttabPanelJSX = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\tfunction TabPanel(props) {\r\n      const {value, index, data } = props;\r\n      if(value!==index)\r\n        return null\r\n      else\r\n        return data\r\n    }\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Tabs value={this.state.tabValue} onChange={this.changeTabValue}\r\n\t\t\t\t\t\t\tvariant=\"fullWidth\" indicatorColor=\"secondary\" textColor=\"primary\">\r\n\t\t\t\t\t<Tab label=\"Ingredients\"/>\r\n\t\t\t\t\t<Tab label=\"Equipments\"/>\r\n\t\t\t\t\t<Tab label=\"Instructions\"/>\r\n\t\t\t\t\t<Tab label=\"Nutrition\"/>\r\n\t\t\t\t</Tabs>\r\n\t\t\t\t<TabPanel value={this.state.tabValue} index={0} data={this.ingredientJSX()}>\r\n\t\t\t\t</TabPanel>\r\n\t\t\t\t<TabPanel value={this.state.tabValue} index={1} data={this.equipmentsJSX()}>\r\n\t\t\t\t\tItem Two\r\n\t\t\t\t</TabPanel>\r\n\t\t\t\t<TabPanel value={this.state.tabValue} index={2} data={this.instructionsJSX()}>\r\n\t\t\t\t\tItem Three\r\n\t\t\t\t</TabPanel>\r\n\t\t\t\t<TabPanel value={this.state.tabValue} index={3} \r\n\t\t\t\t          data={<NutiritionChart data = {this.state.details.nutrition.nutrients}/>}>\r\n\t\t\t\t\tItem Three\r\n\t\t\t\t</TabPanel>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n\r\n\tdetailsJSX = () => {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<Grid container className = {classes.root}>\r\n\t\t\t\t<Grid item xs = {6} className = {classes.gridCenter}>\r\n\t\t\t\t\t<img src = {this.state.details.image} className = {classes.recipeImage}/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {6} className = {classes.gridAboutRecipe}>\r\n\t\t\t\t\t{this.aboutRecipePanelJSX()}\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t  {this.tabPanelJSX()}\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t{/*<Grid item xs = {6} style = {{marginTop : \"40px\", \"border-right\" : \"0.1px grey solid\"}}>\r\n\t\t\t\t\t<Grid container style = {{margin : \"0px 20px 0px 0px\", width : \"auto\"}}>\r\n\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter} style = {{marginBottom : \"20px\"}}>\r\n\t\t\t\t\t\t\t<Typography variant = \"button\" className = {classes.heading}>Ingredients</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t{this.ingredientJSX()}\r\n\r\n\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter} style = {{marginBottom : \"20px\"}}>\r\n\t\t\t\t\t\t\t<Typography variant = \"button\" className = {classes.heading}>Equipments</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t{this.equipmentsJSX()}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {6} style = {{marginTop : \"40px\"}}>\r\n\t\t\t\t\t<Grid container style = {{margin : \"0px 0px 0px 20px\", width : \"auto\"}}>\r\n\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter} style = {{marginBottom : \"20px\"}}>\r\n\t\t\t\t\t\t\t<Typography variant = \"button\" className = {classes.heading}>Instructions</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t{this.instructionsJSX()}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t<NutiritionChart data = {this.state.details.nutrition.nutrients}/>\r\n\t\t\t\t</Grid>*/}\r\n\t\t  </Grid>\r\n\t\t)\r\n\t}\r\n\r\n  render(){\r\n\t\treturn(\r\n\t\tthis.state.isLoaded && \r\n\t\t  <Grid container spacing = {2}>\r\n\r\n\t\t\t  <Grid item xs = {12}>\r\n\t\t\t\t\t<NavBar home = {true}/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {10}>\r\n\t\t\t\t  {this.detailsJSX()}\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {2}>\r\n\t\t\t\t\t<Grid container spacing = {2} style = {{marginTop : \"50px\"}}>\r\n\t\t\t\t\t\t{this.state.similarRecipes.length > 0 && \r\n\t\t\t\t\t\t\tthis.state.similarRecipes.map(item => (\r\n\t\t\t\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t\t\t\t<RecipeCard id = {item.id} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\timage = {CONFIG.IMAGE_URL_RECIPE + item.id + \"-312x231.\" + item.imageType}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle = {item.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tservings = {item.servings}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime = {item.readyInMinutes}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tboxShadow = {false}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tredirectToRecipeDetails = {this.redirectToRecipeDetails}/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t  </Grid>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default withStyles(style, {withTheme: true})(RecipeDetails);","D:\\My Projects\\react-recipe\\client\\src\\ServiceClass.js",[],"D:\\My Projects\\react-recipe\\client\\src\\Components\\NavBar.js",["89"],"D:\\My Projects\\react-recipe\\client\\src\\Config.js",["90","91"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeCard.js",["92","93","94","95"],"import React, {Component} from 'react';\r\nimport {recipeSearchAPI} from '../ServiceClass.js'\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport BookmarkEmptyIcon from '@material-ui/icons/BookmarkBorder';\r\nimport BookmarkFilledIcon from '@material-ui/icons/Bookmark';\r\n\r\nconst style = theme => ({\r\n\tcard : {\r\n\t\theight : \"215px\",\r\n\t\twidth : \"100%\",\r\n\t\tposition: \"relative\",\r\n\t\tborderRadius : \"4px\",\r\n\t\tbackgroundColor: \"transparent\",\r\n\t\tboxShadow : \"none\"\r\n\t},\r\n\timage : {\r\n\t\twidth : \"100%\",\r\n\t\theight : \"180px\",\r\n\t\tobjectFit : \"cover\",\r\n\t\tobjectPosition : \"center center\",\r\n\t\tborderBottom : \"6px solid #932432\"\r\n\t},\r\n\ttitleDiv : {\r\n\t\tposition : \"absolute\", \r\n\t\tleft : 0, \r\n\t\tbottom : 0, \r\n\t\tmaxWidth : \"160px\",\r\n\t\tpadding : \"0px 10px 0px 10px\", \r\n\t\tbackgroundColor : \"#932432\",\r\n\t\tborderRadius : \"0px\"\r\n\t},\r\n\ttitle : {\r\n\t\tmargin : \"5px 0px 5px 0px\",\r\n\t\t// marginBottom : \"10px\",\r\n\t\tlineHeight: \"1.3rem !important\",\r\n\t\ttextOverflow: \"ellipsis\",\r\n\t\toverflow: \"hidden\",\r\n\t\t\"-webkit-line-clamp\": 1,\r\n\t\t\"-webkit-box-orient\": \"vertical\",\r\n\t\tmaxHeight: \"1.5rem\",\r\n\t\tdisplay: \"-webkit-box\",\r\n\t\tcursor : \"pointer\",\r\n\t\tfontFamily : \"Fira Sans\",\r\n\t\ttextTransform : \"capitalize\",\r\n\t\t// color : \"#932432\",\r\n\t\tcolor : \"#fff\",\r\n\t\tfontSize : \"15px\"\r\n\t},\r\n\tsecondaryText : {\r\n\t\tfontFamily : \"Fira Sans\",\r\n\t\tcursor : \"pointer\",\r\n\t\tdisplay : \"inline\",\r\n\t\tfontSize : \"17px\"\r\n\t},\r\n\tbookmarkIcon : {\r\n\t\tposition: \"absolute\",\r\n\t\ttop: \"10px\",\r\n\t\tright : \"10px\",\r\n\t\tfontSize : \"40px\",\r\n\t\tcolor : \"white\",\r\n\t\tcursor : \"pointer\",\r\n\t\tbackgroundColor: \"rgba(0,0,0,0.5)\",\r\n\t}\r\n})\r\n\r\nclass RecipeCard extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t// console.log(\"RecipeCard: \",props)\r\n\t\tthis.state = {\r\n\t\t\tresults : [],\r\n\t\t\tisLoaded : false,\r\n\t\t\tisBookmarked : props.bookMarkedRecipes.includes(props.id)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\r\n\t}\r\n\r\n\tbookmarkClickHandler = () => {\r\n\t\tthis.setState({\r\n\t\t\tisBookmarked : !(this.state.isBookmarked)\r\n\t\t})\r\n\t}\r\n\r\n  render(){\r\n\t\tconst { classes } = this.props;\r\n\t\treturn(\r\n\t\t\t<Card className = {classes.card} \r\n\t\t\t\t\t\tstyle = {{position : \"relative\"}}>\r\n\t\t\t\t<img className={classes.image} src = {this.props.image}/>\r\n\t\t\t\t<Grid container style = {{margin : \"10px\", width : \"auto\"}}>\r\n\t\t\t\t\t<div className = {classes.titleDiv}>\r\n\t\t\t\t\t  <Typography variant = \"h6\" className = {classes.title} \r\n\t\t\t\t\t\t\t\t\t\t\tonClick = {() => this.props.redirectToRecipeDetails(this.props.id)}>\r\n\t\t\t\t\t\t  {this.props.title}\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/*<Grid item xs style = {{textAlign : \"center\"}}>\r\n\t\t\t\t\t\t<Typography className = {classes.secondaryText}>{this.props.servings + \" Servings / \" + this.props.time + \" Min\"}</Typography>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs>\r\n\t\t\t\t\t\t<Typography className = {classes.secondaryText} style = {{float : \"right\"}}>{this.props.time + \" Min\"}</Typography>\r\n\t\t\t\t\t</Grid>*/}\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<BookmarkEmptyIcon className = {classes.bookmarkIcon}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t onClick = {this.bookmarkClickHandler} \r\n\t\t\t\t                   style = {{display : this.state.isBookmarked ? \"none\" : \"block\"}}/>\r\n\t\t\t\t<BookmarkFilledIcon className = {classes.bookmarkIcon} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick = {this.bookmarkClickHandler} \r\n\t\t\t\t                    style = {{display : this.state.isBookmarked ? \"block\" : \"none\"}}/>\r\n\t\t\t</Card>\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default withStyles(style, {withTheme: true})(RecipeCard);","D:\\My Projects\\react-recipe\\client\\src\\Components\\NutritionChart.js",["96","97","98","99"],"import React, {Component} from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst style = theme => ({\r\n\r\n})\r\n\r\nclass Recipes extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\t// console.log(\"Nutrition Charts\",this.props)\r\n\t\tlet percentage = [], amounts = [], labels = [];\r\n\t\tthis.props.data.map(item =>{\r\n\t\t\tpercentage.push(item.percentOfDailyNeeds)\r\n\t\t\t// amounts.push(item.amount + \" \" + item.unit)\r\n\t\t\tlabels.push(item.name + \" (\" + item.amount + \" \" + item.unit + \") \")\r\n\t\t})\r\n\r\n\t\tlet letters = '0123456789ABCDEF'.split('');\r\n\t\tlet colorArr = []\r\n\t\tfor(let i = 0; i < percentage.length ; i++ ){\r\n\t\t  let color = '#';\r\n\t\t\tfor (let j = 0; j < 6; j++ ) {\r\n\t\t\t\tcolor += letters[Math.floor(Math.random() * 16)];\r\n\t\t\t}\r\n\t\t\tcolorArr.push(color)\r\n\t  }\r\n\r\n    let chartData = {\r\n      labels: labels,\r\n      datasets:\r\n        [{\r\n          type: 'doughnut',\r\n          label: labels,\r\n          data: percentage,\r\n          borderWidth: 1,\r\n          backgroundColor: colorArr,\r\n          borderColor: \"white\",\r\n          hoverBorderColor: 'fff',\r\n        }]\r\n\t\t}\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tchartData : chartData\r\n\t\t}\r\n\t}\r\n\r\n  render(){\r\n\t\tconst { classes } = this.props;\r\n\t\treturn(\r\n\t\t\t<React.Fragment>\r\n\t\t\t  <div style = {{marginTop : \"60px\"}}>\r\n\t\t\t\t<Doughnut data = {this.state.chartData}\r\n\t\t\t\t\ttype=\"doughnut\"\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t// responsive: true,\r\n\t\t\t\t\t\t// maintainAspectRatio: false,\r\n\t\t\t\t\t\taspectRatio : 3,\r\n\t\t\t\t\t\tsegmentShowStroke : true,\r\n\t\t\t\t\t\tsegmentStrokeColor : \"#fff\",\r\n\t\t\t\t\t\tsegmentStrokeWidth : 2,\r\n\t\t\t\t\t\tpercentageInnerCutout : 50,\r\n\t\t\t\t\t\tanimationSteps : 100,\r\n\t\t\t\t\t\tanimationEasing : \"easeOutBounce\",\r\n\t\t\t\t\t\tanimateRotate : true,\r\n\t\t\t\t\t\tanimateScale : false,\r\n\t\t\t\t\t\tshowScale: true,\r\n\t\t\t\t\t\tanimateScale: true,\r\n\t\t\t\t\t\t// title : {\r\n\t\t\t\t\t\t// \tposition: \"top\",\r\n\t\t\t\t\t\t// \ttext: \"Nutrition Chart\",\r\n\t\t\t\t\t\t// \tdisplay: true,\r\n\t\t\t\t\t\t// \tfontSize: 18,\r\n\t\t\t\t\t\t// \tfontColor: \"#111\"\r\n\t\t\t\t\t\t// },\r\n\t\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\t\t\tposition: \"right\",\r\n\t\t\t\t\t\t\tlabels: {\r\n\t\t\t\t\t\t\t\tfontColor: \"#333\",\r\n                fontSize: 14\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}/>\r\n\t\t\t\t</div>\r\n\t\t  </React.Fragment>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default withStyles(style, {withTheme: true})(Recipes);","D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipesHome.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\RecipeHeader.js",["117","118"],"import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CheckBox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';import vegIcon from '../Assets/Icons/veg.svg'\r\nimport nonVegIcon from '../Assets/Icons/nonVeg.svg'\r\n\r\nconst style = theme => ({\r\n\tgridCenter : {\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n\tinfoLabelBold : {\r\n\t\tfontSize : \"1.5rem\",\r\n\t\tfontWeight : \"bold\"\r\n\t},\r\n\tinfoLabel : {\r\n\t\tfontSize : \"1.5rem\",\r\n\t},\r\n\tvegIcon : {\r\n\t\theight : \"70px\",\r\n\t\twidth : \"70px\"\r\n\t},\r\n\tgridCenterFlex : {\r\n\t\talignItems : \"center\",\r\n\t\tjustifyContent : \"center\",\r\n\t\tdisplay : \"flex\"\r\n\t},\r\n})\r\n\r\nclass NavBar extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t}\r\n\t}\r\n\r\n  render(){\r\n\t\tconst { classes } = this.props;\r\n\t\treturn(\r\n\t\t\t<Grid container>\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter} style = {{marginBottom : \"30px\"}}>\r\n\t\t\t\t\t<Typography variant = \"h3\">{this.props.details.title}</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter} style = {{\"border-right\" : \"0.1px grey solid\"}}>\r\n\t\t\t\t\t{/*<Tooltip title = {\"Cook Time\"}><img src = {timeIcon} className = {classes.logo}/></Tooltip>*/}\r\n\t\t\t\t\t<Typography variant = \"button\" className = {classes.infoLabelBold}>Cook Time</Typography>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.infoLabel}>\r\n\t\t\t\t\t\t{this.props.details.readyInMinutes}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter} style = {{\"border-right\" : \"0.1px grey solid\"}}>\r\n\t\t\t\t\t<Typography variant = \"button\" className = {classes.infoLabelBold}>Servings</Typography>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" className = {classes.infoLabel}>\r\n\t\t\t\t\t\t{this.props.details.servings}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {4} className = {classes.gridCenter}>\r\n\t\t\t\t\t<Tooltip title = {\"Vegetarian/ Non-vegetarian\"}>\r\n\t\t\t\t\t\t<img src = {this.props.details.vegetarian ? vegIcon : nonVegIcon} \r\n\t\t\t\t\t\t\t\tclassName = {classes.vegIcon}/>\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenterFlex} style = {{marginTop : \"30px\"}}>\r\n\t\t\t\t\t<Typography variant = \"subtitle1\" style = {{display : \"inline\"}}>\r\n\t\t\t\t\t\t{\"AUTHOR : \"} {this.props.details.creditsText}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs = {12} className = {classes.gridCenterFlex} style = {{marginTop : \"10px\"}}>\r\n\t\t\t\t\t{this.props.details.dishTypes.length > 0 && this.props.details.dishTypes.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" />\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.props.details.cuisines.length > 0 && this.props.details.cuisines.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" />\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.props.details.diets.length > 0 && this.props.details.diets.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" />\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{this.props.details.occasions.length > 0 && this.props.details.occasions.map(item => (\r\n\t\t\t\t\t\t<Chip label = {item} variant = \"outlined\" />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t</Grid>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default withStyles(style, {withTheme: true})(NavBar);","D:\\My Projects\\react-recipe\\client\\src\\Components\\LogIn.js",["119","120","121","122"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\SignUp.js",["123","124"],"import React, {Component, useState} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {signupAPI} from '../ServiceClass.js';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Card, TextField, Grid, Button, InputAdornment, IconButton  } from '@material-ui/core';\r\nimport signupBackground from '../Assets/Images/background/signup_background.jpg';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport LogoIcon from '../Assets/Icons/Logo.svg'\r\n\r\nconst style = theme => ({\r\n\troot : {\r\n\t\tbackgroundImage : `url(${signupBackground})`,\r\n\t\theight : \"100vh\",\r\n\t\tbackgroundAttachment: \"fixed\",\r\n\t\tbackgroundRepeat: \"no-repeat\",\r\n\t\tbackgroundSize: \"cover\",\r\n\t\tbackgroundPosition: \"center center\",\r\n\t\talignItems : \"center\",\r\n\t\t// justifyContent : \"center\",\r\n\t\tdisplay : \"flex\"\r\n\t},\r\n\tcard : {\r\n\t\theight : \"70vh\",\r\n\t\twidth : \"300px\",\r\n\t\tmargin : \"15vw\",\r\n\t\tborder: \"1px solid #fff\",\r\n\t\tborderRadius: \"15px\",\r\n\t\tboxShadow: \"0 0 1rem 0 rgba(0, 0, 0, 0.2)\",\r\n\t\t// backdropFilter: \"blur(5px) saturate(100%) contrast(45%) brightness(130%)\",\r\n\t\tbackdropFilter: \"blur(5px)\",\r\n\t\tbackgroundColor: \"rgba(255, 255, 255, 0.3)\",\r\n\t\talignItems : \"center\",\r\n\t\tjustifyContent : \"center\",\r\n\t\tdisplay : \"flex\",\r\n\t\tpadding : \"20px\"\r\n\t},\r\n\t\r\n\ttextField : {\r\n\t\tmarginBottom : \"30px\",\r\n\t\twidth : \"100%\",\r\n\t\t\"& .MuiFormLabel-root\": {\r\n\t\t\tcolor: \"#fff\"\r\n\t\t},\r\n\t\t\"&:hover .MuiFormLabel-root\": {\r\n\t\t\tcolor: \"#932432\"\r\n\t\t},\r\n\t\t\"& .MuiInputBase-input\" : {\r\n\t\t\tcolor : \"#fff\"\r\n\t\t},\r\n\t\t\"&:hover .MuiInputBase-input\" : {\r\n\t\t\tcolor : \"#932432\",\r\n\t\t},\r\n\t\t\"& .Mui-focused .MuiInputBase-input\" : {\r\n\t\t\tcolor : \"#932432\"\r\n\t\t},\r\n\t\t\"& .Mui-focused\" : {\r\n\t\t\tcolor : \"#932432\",\r\n\t\t},\r\n\t\t\"& .MuiOutlinedInput-notchedOutline\" : {\r\n\t\t\tborderColor : \"#fff\"\r\n\t\t},\r\n\t\t\"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"#932432\"\r\n    },\r\n\t},\r\n\tgridCenter : {\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n\tbutton : {\r\n\t\tmarginBottom : \"20px\",\r\n\t\twidth : \"100%\",\r\n\t\tcolor : \"#fff\",\r\n\t\tborder: \"1px solid #932432\",\r\n\t},\r\n\tsignupLink : {\r\n\t\tcursor : \"pointer\",\r\n\t\ttextAlign : \"center\"\r\n\t},\r\n\tsignupText : {\r\n\t\t\"&:hover\" : {\r\n\t\t\ttextDecoration : \"underline\"\r\n\t\t}\r\n\t},\r\n\ttitle: {\r\n\t\tmargin : \"0px 0px 20px 0px\",\r\n\t\tfontFamily : \"Oleo Script Swash Caps\",\r\n\t\tcolor : \"#fff\",\r\n\t\tfontSize : \"10rem\"\r\n\t},\r\n\tlogo : {\r\n\t\theight : \"42px\", \r\n\t\twidth : \"42px\", \r\n\t\tverticalAlign : \"sub\"\r\n\t},\r\n\tsubHeading: {\r\n\t\tcolor : \"#fff\",\r\n\t},\r\n\ticonButton : {\r\n\t\tcolor : \"rgba(225, 225, 225, 0.50)\",\r\n\t}\r\n})\r\n\r\nconst SignUp = (props) => {\r\n\tlet [values, setValues] = useState({\r\n\t\tusername : '',\r\n\t\temail : ''\r\n\t})\r\n\tlet [password, setPassword] = useState({\r\n\t\tvalue : '',\r\n\t\tshowPassword : false\r\n\t});\r\n\tlet [confirmPassword, setConfirmPassword] = useState({\r\n\t\tvalue : '',\r\n\t\tshowPassword : false\r\n\t});\r\n\r\n\r\n\tconst redirectToSignup = () => {\r\n\t\tthis.props.history.push({\r\n\t\t\tpathname: `${this.props.baseURL}/login`,\r\n\t\t});\r\n\t}\r\n\r\n\tconst textFieldChangeHandler = (event, id) =>{\r\n\t\tsetValues({ ...values, [id]: event.target.value });\r\n\t}\r\n\r\n\tconst passwordChangeHandler = (event) => {\r\n\t\tsetPassword({...password, value : event.target.value})\r\n\t}\r\n\r\n\tconst handleClickShowPassword = () => {\r\n    setPassword({ ...password, showPassword: !password.showPassword });\r\n  };\r\n\r\n\tconst confirmPasswordChangeHandler = (event) => {\r\n\t\tsetConfirmPassword({...confirmPassword, value : event.target.value})\r\n\t}\r\n\r\n\tconst handleClickShowConfirmPassword = () => {\r\n    setConfirmPassword({ ...confirmPassword, showPassword: !confirmPassword.showPassword });\r\n  };\r\n\r\n\tconst signupUser = () => {\r\n\t\tconsole.log(values.username, values.email, password.value, confirmPassword.value);\r\n\t\tif(password.value === confirmPassword.value){\r\n\t\t\tsignupAPI(values.username, values.email, password.value)\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res && res.success){\r\n\t\t\t\t\tprops.history.push({\r\n\t\t\t\t\t\tpathname: `${props.baseURL}/login`,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch(err => console.log(err))\r\n\t\t}else{\r\n\t\t\tconsole.log(\"Incorrect Password\");\r\n\t\t}\r\n\t}\r\n\r\n\t\tconst { classes } = props;\r\n\t\treturn(\r\n\t\t\t<div className = {classes.root}>\r\n\t\t\t\t<Card className = {classes.card}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t\t\t<TextField label=\"User Name\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t color = \"secondary\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t className = {classes.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t value = {values.username}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange = {(e) => {textFieldChangeHandler(e, 'username')}}/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t\t\t<TextField label=\"Email\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t color = \"secondary\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t className = {classes.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t value = {values.email}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange = {(e) => {textFieldChangeHandler(e, 'email')}}/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t\t\t<TextField label=\"Password\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t color = \"secondary\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t className = {classes.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t type={password.showPassword ? 'text' : 'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t value = {password.value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange = {(e) => {passwordChangeHandler(e)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t InputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tendAdornment: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<InputAdornment position=\"end\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton classes = {{root : classes.iconButton}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleClickShowPassword()}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => {e.preventDefault()}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{password.showPassword ? <Visibility /> : <VisibilityOff />}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t }}/>\r\n\t\t\t\t\t\t</Grid>\t\r\n\t\t\t\t\t\t<Grid item xs = {12}>\r\n\t\t\t\t\t\t\t<TextField label=\"Confirm Password\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t color = \"secondary\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t className = {classes.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t type={confirmPassword.showPassword ? 'text' : 'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t value = {confirmPassword.value}\r\n\t\t\t\t\t\t\t\t\t\t\t\t onChange = {(e) => {confirmPasswordChangeHandler(e)}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t InputProps={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tendAdornment: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<InputAdornment position=\"end\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton classes = {{root : classes.iconButton}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleClickShowConfirmPassword()}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(e) => {e.preventDefault()}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{confirmPassword.showPassword ? <Visibility /> : <VisibilityOff />}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</InputAdornment>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t }}/>\r\n\t\t\t\t\t  </Grid>\r\n\t\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t\t<Button variant=\"contained\" \r\n\t\t\t\t\t\t\t\t\t\t\tclassName = {classes.button} \r\n\t\t\t\t\t\t\t\t\t\t\tcolor = \"secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick = {() => {signupUser()}}>\r\n\t\t\t\t\t\t\t\tSignup\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs = {12} className = {classes.signupLink} onClick = {() => {redirectToSignup()}}>\r\n\t\t\t\t\t\t\t<Typography variant=\"caption\" color = \"secondary\" className = {classes.signupText}>\r\n\t\t\t\t\t\t\t\tAlready have an Account? Login Now!\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Card>\r\n\r\n\t\t\t\t<Grid container style = {{width : \"500px\"}}>\r\n\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t<Typography className={classes.title} variant=\"h1\" noWrap>\r\n\t\t\t\t\t\t\tRecipe\r\n\t\t\t\t\t  </Typography>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs = {12} className = {classes.gridCenter}>\r\n\t\t\t\t\t\t<Typography className={classes.subHeading} variant=\"h4\">\r\n\t\t\t\t\t\t  Register for a free account to save your favourite recipes to your recipe box!\r\n\t\t\t\t\t  </Typography>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\nexport default withStyles(style, {withTheme: true})(SignUp);","D:\\My Projects\\react-recipe\\client\\src\\Components\\Dashboard.js",["125","126","127"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\theme.js",[],["128","129"],"D:\\My Projects\\react-recipe\\client\\src\\Components\\DrawerJSX.js",["130","131"],"import React, {Component, useState} from 'react';\r\nimport {cuisineList, dietList, intoleranceList, mealTypeList} from '../ServiceClass.js'\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Button, Typography, List, ListItem, ListItemText, ListItemIcon, Collapse, Divider, Checkbox } from '@material-ui/core';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\n\r\nconst style = theme => ({\r\n\ttext : {\r\n\t\tfontFamily : \"Fira Sans\",\r\n\t\tfontSize : \"17px\",\r\n\t\t// color : \"#fff\"\r\n\t},\r\n\ttextSmall : {\r\n\t\tfontFamily : \"Fira Sans\",\r\n\t\tfontSize : \"14px\",\r\n\t\ttextTransform : \"capitalize\",\r\n\t\t// color : \"#fff\"\r\n\t},\r\n\tdivider : {\r\n\t\t// backgroundColor : \"#fff\"\r\n\t},\r\n\ticon : {\r\n\t\t// fill : \"#fff\",\r\n\t},\r\n\tlist : {\r\n\t\tpadding : \"0px\"\r\n\t},\r\n\tlistItemRoot : {\r\n\t\tpaddingTop : \"2px\",\r\n\t\tpaddingBottom : \"2px\"\r\n\t},\r\n\tlistItemIcon : {\r\n\t\tminWidth : \"40px\"\r\n\t},\r\n\tcheckBox : {\r\n\t\tpadding : \"4px\",\r\n\t\t// color : \"#fff\"\r\n\t},\r\n\tbutton : {\r\n\t\tmarginTop : \"20px\",\r\n\t\tmarginBottom : \"114px\",\r\n\t\tmarginRight : \"5px\",\r\n\t\twidth : \"-webkit-fill-available\",\r\n\t\t// color : \"#fff\",\r\n\t\tborder: \"1px solid #932432\",\r\n\t}\r\n\r\n})\r\n\r\nconst DrawerJSX = (props) => {\r\n\tconst [cuisine, setCuisine] = useState(false)\r\n\tconst [diet, setDiet] = useState(false)\r\n\tconst [intolerance, setIntolerance] = useState(false)\r\n\tconst [mealType, setMealType] = useState(false)\r\n\r\n\tconst [selectedCuisine, setSelectedCuisine] = useState(props.selectedCuisine)\r\n\tconst [selectedDiet, setSelectedDiet] = useState(props.selectedDiet)\r\n\tconst [selectedIntolerance, setSelectedIntolerance] = useState(props.selectedTolerance)\r\n\tconst [selectedMealType, setSelectedMealType] = useState(props.selectedMealType)\r\n\r\n\tconst cuisineCollapseHandler = () =>{\r\n\t\tsetCuisine(current => !current)\r\n\t\tsetDiet(false)\r\n\t\tsetIntolerance(false)\r\n\t\tsetMealType(false)\r\n\t}\r\n\r\n\tconst dietCollapseHandler = () =>{\r\n\t\tsetDiet(current => !current)\r\n\t\tsetCuisine(false)\r\n\t\tsetIntolerance(false)\r\n\t\tsetMealType(false)\r\n\t}\r\n\r\n\tconst intoleranceCollapseHandler = () =>{\r\n\t\tsetIntolerance(current => !current)\r\n\t\tsetDiet(false)\r\n\t\tsetCuisine(false)\r\n\t\tsetMealType(false)\r\n\t}\r\n\r\n\tconst mealCollapseHandler = () =>{\r\n\t\tsetMealType(current => !current)\r\n\t\tsetDiet(false)\r\n\t\tsetIntolerance(false)\r\n\t\tsetCuisine(false)\r\n\t}\r\n\r\n\tconst cuisineSelectHandler = (selectedIndex) => {\r\n\t\tconst values = selectedCuisine.some( item => item === cuisineList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t ? selectedCuisine.filter( item => item !== cuisineList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t : selectedCuisine.concat([cuisineList[selectedIndex]]);\t\r\n\t\tsetSelectedCuisine(values)\r\n\t}\r\n\r\n\tconst dietSelectHandler = (selectedIndex) => {\r\n\t\tconst values = selectedDiet.some( item => item === dietList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t ? selectedDiet.filter( item => item !== dietList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t : selectedDiet.concat([dietList[selectedIndex]]);\t\r\n\t\tsetSelectedDiet(values)\r\n\t}\r\n\r\n\tconst intoleranceSelectHandler = (selectedIndex) => {\r\n\t\tconst values = selectedIntolerance.some( item => item === intoleranceList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t ? selectedIntolerance.filter( item => item !== intoleranceList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t : selectedIntolerance.concat([intoleranceList[selectedIndex]]);\t\r\n\t\tsetSelectedIntolerance(values)\r\n\t}\r\n\r\n\tconst mealTypeSelectHandler = (selectedIndex) => {\r\n\t\tconst values = selectedMealType.some( item => item === mealTypeList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t ? selectedMealType.filter( item => item !== mealTypeList[selectedIndex])\r\n\t\t\t\t\t\t\t\t\t : selectedMealType.concat([mealTypeList[selectedIndex]]);\t\r\n\t\tsetSelectedMealType(values)\r\n\t}\r\n\r\n\tconst applyFilters = () => {\r\n\t\treturn ({\r\n\t\t\tselectedCuisine,\r\n\t\t\tselectedDiet,\r\n\t\t\tselectedIntolerance,\r\n\t\t\tselectedMealType,\r\n\t\t})\r\n\t}\r\n\r\n\tconst { classes } = props;\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\r\n\t\t\t{props.selectedCuisine.length > 0 && props.selectedCuisine.map(item => (\r\n\t\t\t\titem !== \"\" && <Chip label = {item} variant = \"outlined\" />\r\n\t\t\t))}\r\n\t\t\t{props.selectedDiet.length > 0 && props.selectedDiet.map(item => (\r\n\t\t\t\titem !== \"\" && <Chip label = {item} variant = \"outlined\" />\r\n\t\t\t))}\r\n\t\t\t{props.selectedTolerance.length > 0 && props.selectedTolerance.map(item => (\r\n\t\t\t\titem !== \"\" && <Chip label = {item} variant = \"outlined\" />\r\n\t\t\t))}\r\n\t\t\t{props.selectedMealType.length > 0 && props.selectedMealType.map(item => (\r\n\t\t\t\titem !== \"\" && <Chip label = {item} variant = \"outlined\" />\r\n\t\t\t))}\r\n\r\n\t\t\t<List className = {classes.list}>\r\n\t\t\t\t<ListItem button onClick = {() => cuisineCollapseHandler()}>\r\n\t\t\t\t\t<ListItemText primary=\"Cuisine\" classes = {{primary : classes.text}}/>\r\n\t\t\t\t\t{cuisine ? <ExpandLess className = {classes.icon}/> : <ExpandMore className = {classes.icon}/>}\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<Collapse in={cuisine} timeout=\"auto\" unmountOnExit>\r\n\t\t\t\t\t<List component=\"div\" disablePadding>\r\n\t\t\t\t\t\t{cuisineList.map((item,index) => (\r\n\t\t\t\t\t\t\t<ListItem button className={classes.nested} \r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses = {{root : classes.listItemRoot}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => {cuisineSelectHandler(index)}}>\r\n\t\t\t\t\t\t\t\t<ListItemIcon className = {classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={selectedCuisine.some( i => i === item)}\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.checkBox}\r\n\t\t\t\t\t\t\t\t\t\tdisableRipple/>\r\n\t\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t\t<Typography variant = \"subtitle2\" className = {classes.textSmall}>{item}</Typography>\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</Collapse>\r\n\t\t\t</List>\r\n\r\n\t\t\t<Divider width = \"100%\" className = {classes.divider}/>\r\n\r\n\t\t\t<List className = {classes.list}>\r\n\t\t\t\t<ListItem button onClick = {() => dietCollapseHandler()}>\r\n\t\t\t\t\t<ListItemText primary=\"Diet\" classes = {{primary : classes.text}}/>\r\n\t\t\t\t\t{diet ? <ExpandLess className = {classes.icon}/> : <ExpandMore className = {classes.icon}/>}\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<Collapse in={diet} timeout=\"auto\" unmountOnExit>\r\n\t\t\t\t\t<List component=\"div\" disablePadding>\r\n\t\t\t\t\t\t{dietList.map((item, index) => (\r\n\t\t\t\t\t\t\t<ListItem button className={classes.nested} \r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses = {{root : classes.listItemRoot}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => {dietSelectHandler(index)}}>\r\n\t\t\t\t\t\t\t\t<ListItemIcon className = {classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={selectedDiet.some( i => i === item)}\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.checkBox}\r\n\t\t\t\t\t\t\t\t\t\tdisableRipple/>\r\n\t\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t  <Typography variant = \"subtitle2\" className = {classes.textSmall}>{item}</Typography>\r\n\t\t\t\t\t\t  </ListItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</Collapse>\r\n\t\t\t</List>\r\n\r\n\t\t\t<Divider width = \"100%\" className = {classes.divider}/>\r\n\r\n\t\t\t<List className = {classes.list}>\r\n\t\t\t\t<ListItem button onClick = {() => intoleranceCollapseHandler()}>\r\n\t\t\t\t\t<ListItemText primary=\"Intolerance\" classes = {{primary : classes.text}}/>\r\n\t\t\t\t  {intolerance ? <ExpandLess className = {classes.icon}/> : <ExpandMore className = {classes.icon}/>}\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<Collapse in={intolerance} timeout=\"auto\" unmountOnExit>\r\n\t\t\t\t\t<List component=\"div\" disablePadding>\r\n\t\t\t\t\t\t{intoleranceList.map((item, index) => (\r\n\t\t\t\t\t\t\t<ListItem button className={classes.nested} \r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses = {{root : classes.listItemRoot}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => {intoleranceSelectHandler(index)}}>\r\n\t\t\t\t\t\t\t\t<ListItemIcon className = {classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={selectedIntolerance.some( i => i === item)}\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.checkBox}\r\n\t\t\t\t\t\t\t\t\t\tdisableRipple/>\r\n\t\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t\t<Typography variant = \"subtitle2\" className = {classes.textSmall}>{item}</Typography>\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</Collapse>\r\n\t\t\t</List>\r\n\r\n\t\t\t<Divider width = \"100%\" className = {classes.divider}/>\r\n\r\n\t\t\t<List className = {classes.list} >\r\n\t\t\t\t<ListItem button onClick = {() => mealCollapseHandler()}>\r\n\t\t\t\t\t<ListItemText primary=\"Meal Type\" classes = {{primary : classes.text}}/>\r\n\t\t\t\t  {mealType ? <ExpandLess className = {classes.icon}/> : <ExpandMore className = {classes.icon}/>}\r\n\t\t\t\t</ListItem>\r\n\t\t\t\t<Collapse in={mealType} timeout=\"auto\" unmountOnExit>\r\n\t\t\t\t\t<List component=\"div\" disablePadding>\r\n\t\t\t\t\t\t{mealTypeList.map((item, index) => (\r\n\t\t\t\t\t\t\t<ListItem button className={classes.nested} \r\n\t\t\t\t\t\t\t\t\t\t\t\tclasses = {{root : classes.listItemRoot}}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick = {() => {mealTypeSelectHandler(index)}}>\r\n\t\t\t\t\t\t\t\t<ListItemIcon className = {classes.listItemIcon}>\r\n\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\tchecked={selectedMealType.some( i => i === item)}\r\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\tclassName = {classes.checkBox}\r\n\t\t\t\t\t\t\t\t\t\tdisableRipple/>\r\n\t\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t\t\t<Typography variant = \"subtitle2\" className = {classes.textSmall}>{item}</Typography>\r\n\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t</Collapse>\r\n\t\t\t</List>\r\n\r\n\t\t\t<Divider width = \"100%\" className = {classes.divider}/>\r\n\r\n\t\t\t<Button variant=\"contained\" \r\n\t\t\t\t\t\t\tclassName = {classes.button} \r\n\t\t\t\t\t\t\tcolor = \"secondary\"\r\n\t\t\t\t\t\t\tonClick = {() => {props.applyFilter(applyFilters())}}>\r\n\t\t\t\tApply\r\n\t\t\t</Button>\r\n\r\n\t\t</React.Fragment>\r\n\t)\r\n}\r\n\r\nexport default withStyles(style, {withTheme: true})(DrawerJSX);",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":2,"column":32,"nodeType":"138","messageId":"139","endLine":2,"endColumn":40},{"ruleId":"136","severity":1,"message":"140","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":14},{"ruleId":"136","severity":1,"message":"141","line":14,"column":7,"nodeType":"138","messageId":"139","endLine":14,"endColumn":13},{"ruleId":"136","severity":1,"message":"142","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":20},{"ruleId":"136","severity":1,"message":"143","line":13,"column":8,"nodeType":"138","messageId":"139","endLine":13,"endColumn":16},{"ruleId":"136","severity":1,"message":"144","line":21,"column":8,"nodeType":"138","messageId":"139","endLine":21,"endColumn":17},{"ruleId":"145","severity":1,"message":"146","line":101,"column":2,"nodeType":"147","messageId":"148","endLine":101,"endColumn":12},{"ruleId":"149","severity":1,"message":"150","line":197,"column":7,"nodeType":"151","endLine":198,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":236,"column":9,"nodeType":"151","endLine":239,"endColumn":50},{"ruleId":"149","severity":1,"message":"150","line":269,"column":9,"nodeType":"151","endLine":272,"endColumn":50},{"ruleId":"136","severity":1,"message":"152","line":313,"column":11,"nodeType":"138","messageId":"139","endLine":313,"endColumn":18},{"ruleId":"149","severity":1,"message":"150","line":352,"column":6,"nodeType":"151","endLine":352,"endColumn":79},{"ruleId":"149","severity":1,"message":"150","line":121,"column":17,"nodeType":"151","endLine":121,"endColumn":67},{"ruleId":"136","severity":1,"message":"153","line":5,"column":5,"nodeType":"138","messageId":"139","endLine":5,"endColumn":7},{"ruleId":"154","severity":1,"message":"155","line":28,"column":1,"nodeType":"156","endLine":48,"endColumn":3},{"ruleId":"136","severity":1,"message":"157","line":2,"column":9,"nodeType":"138","messageId":"139","endLine":2,"endColumn":24},{"ruleId":"136","severity":1,"message":"158","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":14},{"ruleId":"136","severity":1,"message":"159","line":9,"column":8,"nodeType":"138","messageId":"139","endLine":9,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":99,"column":5,"nodeType":"151","endLine":99,"endColumn":62},{"ruleId":"136","severity":1,"message":"160","line":14,"column":24,"nodeType":"138","messageId":"139","endLine":14,"endColumn":31},{"ruleId":"161","severity":1,"message":"162","line":15,"column":28,"nodeType":"163","messageId":"164","endLine":15,"endColumn":30},{"ruleId":"136","severity":1,"message":"152","line":51,"column":11,"nodeType":"138","messageId":"139","endLine":51,"endColumn":18},{"ruleId":"145","severity":1,"message":"165","line":70,"column":7,"nodeType":"147","messageId":"148","endLine":70,"endColumn":19},{"ruleId":"136","severity":1,"message":"142","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":20},{"ruleId":"136","severity":1,"message":"166","line":39,"column":8,"nodeType":"138","messageId":"139","endLine":39,"endColumn":13},{"ruleId":"136","severity":1,"message":"167","line":44,"column":8,"nodeType":"138","messageId":"139","endLine":44,"endColumn":18},{"ruleId":"136","severity":1,"message":"168","line":75,"column":7,"nodeType":"138","messageId":"139","endLine":75,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":427,"column":6,"nodeType":"151","endLine":427,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":434,"column":6,"nodeType":"151","endLine":434,"endColumn":62},{"ruleId":"149","severity":1,"message":"150","line":441,"column":6,"nodeType":"151","endLine":441,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":448,"column":6,"nodeType":"151","endLine":448,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":455,"column":6,"nodeType":"151","endLine":455,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":462,"column":6,"nodeType":"151","endLine":462,"endColumn":64},{"ruleId":"149","severity":1,"message":"150","line":469,"column":6,"nodeType":"151","endLine":469,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":476,"column":6,"nodeType":"151","endLine":476,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":483,"column":6,"nodeType":"151","endLine":483,"endColumn":63},{"ruleId":"149","severity":1,"message":"150","line":502,"column":9,"nodeType":"151","endLine":502,"endColumn":91},{"ruleId":"149","severity":1,"message":"150","line":525,"column":9,"nodeType":"151","endLine":525,"endColumn":91},{"ruleId":"149","severity":1,"message":"150","line":532,"column":9,"nodeType":"151","endLine":532,"endColumn":91},{"ruleId":"149","severity":1,"message":"150","line":555,"column":9,"nodeType":"151","endLine":555,"endColumn":91},{"ruleId":"136","severity":1,"message":"143","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":64,"column":7,"nodeType":"151","endLine":65,"endColumn":40},{"ruleId":"136","severity":1,"message":"169","line":1,"column":16,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"166","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":13},{"ruleId":"136","severity":1,"message":"170","line":132,"column":20,"nodeType":"138","messageId":"139","endLine":132,"endColumn":25},{"ruleId":"149","severity":1,"message":"150","line":139,"column":18,"nodeType":"151","endLine":139,"endColumn":68},{"ruleId":"136","severity":1,"message":"169","line":1,"column":16,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"171","line":11,"column":8,"nodeType":"138","messageId":"139","endLine":11,"endColumn":16},{"ruleId":"136","severity":1,"message":"172","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":27},{"ruleId":"161","severity":1,"message":"162","line":67,"column":33,"nodeType":"163","messageId":"164","endLine":67,"endColumn":35},{"ruleId":"149","severity":1,"message":"150","line":113,"column":14,"nodeType":"151","endLine":114,"endColumn":47},{"ruleId":"132","replacedBy":"173"},{"ruleId":"134","replacedBy":"174"},{"ruleId":"136","severity":1,"message":"169","line":1,"column":16,"nodeType":"138","messageId":"139","endLine":1,"endColumn":25},{"ruleId":"136","severity":1,"message":"175","line":5,"column":8,"nodeType":"138","messageId":"139","endLine":5,"endColumn":12},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'CONFIG' is defined but never used.","'sample' is assigned a value but never used.","'RecipeHeader' is defined but never used.","'CheckBox' is defined but never used.","'veganIcon' is defined but never used.","no-dupe-keys","Duplicate key 'gridCenter'.","ObjectExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'classes' is assigned a value but never used.","'id' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'recipeSearchAPI' is defined but never used.","'Button' is defined but never used.","'Tooltip' is defined but never used.","'amounts' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Duplicate key 'animateScale'.","'Paper' is defined but never used.","'IconButton' is defined but never used.","'backgroundArray' is assigned a value but never used.","'Component' is defined but never used.","'theme' is assigned a value but never used.","'LogoIcon' is defined but never used.","'dashboardBackground' is defined but never used.",["176"],["177"],"'Grid' is defined but never used.","no-global-assign","no-unsafe-negation"]